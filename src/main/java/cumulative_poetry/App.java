/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cumulative_poetry;
import java.util.*;

interface PoetryClass{
  public String poetryTaleOperation();
}

class PoetryTale extends GetPoetryTale implements PoetryClass{

  PoetryTale(String[] taleForDay, List<String> args){
    this.day = taleForDay;
    this.operationList = args;
    this.finalString = "";
    this.maxDayLimit = 12;
    this.minDayLimit = 0;
  }

  public String poetryTaleOperation(){
    Integer dayValue = 0;
    dayValue = Integer.parseInt(operationList.get(1));
    if(dayValue > this.minDayLimit &&  dayValue <= this.maxDayLimit){
      this.finalString = "This is";
      for(int i=dayValue - 1; i>=this.minDayLimit; i--){
        this.getStringForDay(i);
      }
      this.finalString = this.finalString.concat(".");
    }
    else{
      this.finalString = "Day value is outside the range";
    }
    return this.finalString;
  }
}

class WholePoetry extends GetPoetryTale implements PoetryClass{
  String fullPoetry;

  WholePoetry(String[] taleForDay, List<String> args){
    this.day = taleForDay;
    this.operationList = args;
    this.finalString = "";
    this.fullPoetry = "";
    this.maxDayLimit = 12;
    this.minDayLimit = 0;
  }

  public String poetryTaleOperation(){
    for(int i=this.minDayLimit; i<this.maxDayLimit; i++){
      System.out.println(String.format("Day %d -", i+1));
      this.fullPoetry = this.fullPoetry.concat(String.format("Day %d -", i+1));
      this.finalString = "This is";
      for(int j=i; j>=this.minDayLimit; j--){
          this.getStringForDay(j);
      }
      this.finalString = this.finalString.concat(".");
      this.fullPoetry = this.fullPoetry.concat(this.finalString);
      System.out.println(this.finalString);
    }
    return this.fullPoetry;
  }
}

class GetPoetryTale{
  int maxDayLimit;
  int minDayLimit;
  String[] day;
  List<String> operationList;
  String finalString;

  public void getStringForDay(int iterationValue){
    this.finalString = this.finalString.concat(this.day[iterationValue]);
  }

  public String getPoetryTale(String[] taleForDay, String[] args){
      List<String> operationList = Arrays.asList(args);
      String finalString = "";
      if(operationList.contains("--reveal-for-day")){
          PoetryClass poetry = new PoetryTale(taleForDay, operationList);
          finalString = poetry.poetryTaleOperation();
      }
      else if(operationList.contains("--recite")){
          PoetryClass poetry = new WholePoetry(taleForDay, operationList);
          finalString = poetry.poetryTaleOperation();
      }
      else{
          finalString = "Please enter a specific operation";
      }
      return finalString;
  }
}

public class App extends GetPoetryTale{
  String[] taleForDay;
  String[] arguments;

  App(String[] args){
    taleForDay = new String[12];
    taleForDay[0] = " the house that Jack built";
    taleForDay[1] = " the malt that lay in";
    taleForDay[2] = " the rat that ate";
    taleForDay[3] = " the cat that killed";
    taleForDay[4] = " the dog that worried";
    taleForDay[5] = " that cow with the crumpled horn that tossed";
    taleForDay[6] = " the maiden all forlorn that milked";
    taleForDay[7] = " the man all tattered and torn that kissed";
    taleForDay[8] = " the priest all shaven and shorn that married";
    taleForDay[9] = " the rooster that crowed in the morn that woke";
    taleForDay[10] = " the farmer sowing his corn that kept";
    taleForDay[11] = " the horse and the hound and the horn that belonged to";
    arguments = args;
  }

  public String getTaleForDay(){
    String finalPoetry = "";
    finalPoetry = this.getPoetryTale(this.taleForDay, this.arguments);
    if(! Arrays.asList(this.arguments).contains("--recite")){
      System.out.println(finalPoetry);
    }
    return finalPoetry;
  }

  public static void main(String[] args) {
      App app = new App(args);
      String finalPoetry = app.getTaleForDay();
  }
}
