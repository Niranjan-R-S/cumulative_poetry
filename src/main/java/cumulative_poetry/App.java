/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cumulative_poetry;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

interface Poetry{
  public String revealPoetry();
}

class PoetryTaleForDay implements Poetry{
  private CumulativePoetry getPoetryTale;

  PoetryTaleForDay(CumulativePoetry getPoetryTale){
      this.getPoetryTale = getPoetryTale;
  }

  public String revealPoetry(){
    final Integer dayValue = this.getDayValue();
    if(this.checkDayWithinRange(dayValue)){
      return this.getPoetryTale.getPoetryForDay(dayValue);
    }
    return "Day value is outside the range";
  }

  public Integer getDayValue(){
    return Integer.parseInt((String)this.getPoetryTale.flags.get(this.getPoetryTale.DAY_VALUE));
  }

  public Boolean checkDayWithinRange(Integer dayValue){
    return dayValue > this.getPoetryTale.MIN_DAY_LIMIT &&  dayValue <= this.getPoetryTale.tales.length;
  }
}

class WholePoetry implements Poetry{
  private CumulativePoetry getPoetryTale;

  WholePoetry(CumulativePoetry getPoetryTale){
      this.getPoetryTale = getPoetryTale;
  }

  public String revealPoetry() {
    String wholePoem = IntStream.range(this.getPoetryTale.MIN_DAY_LIMIT, this.getPoetryTale.tales.length)
    .mapToObj(dayValue -> {
      final String taleForDay = this.getPoetryTale.getPoetryForDay(dayValue + 1);
      return String.format("Day %d -\n", dayValue + 1).concat(taleForDay + "\n");
    }).collect(Collectors.joining());
    return wholePoem;
  }
}

class NotPoetryProblem implements Poetry{
  public String revealPoetry(){
    return "Please enter a specific operation";
  }
}

class CumulativePoetry{
  final int MIN_DAY_LIMIT;
  final String[] tales;
  final String REVEAL_FOR_DAY = "--reveal-for-day";
  final String RECITE = "--recite";
  final String DAY_VALUE = "for_which_day";
  HashMap<String, Object> flags;
  Poetry poetry;

  CumulativePoetry(HashMap<String, Object> flags){
    this.MIN_DAY_LIMIT = 0;
    this.flags = flags;
    this.tales = new String[]{
      " the horse and the hound and the horn that belonged to",
      " the farmer sowing his corn that kept",
      " the rooster that crowed in the morn that woke",
      " the priest all shaven and shorn that married",
      " the man all tattered and torn that kissed",
      " the maiden all forlorn that milked",
      " that cow with the crumpled horn that tossed",
      " the dog that worried",
      " the cat that killed",
      " the rat that ate",
      " the malth that lay in",
      " the house that Jack built"
    };
  }

  public String revealTaleForDay(int dayValue){
    return this.tales[dayValue];
  }

  public String getPoetryForDay(int dayValue){
    String taleForDay = IntStream.range(this.tales.length - dayValue, this.tales.length)
    .mapToObj(day -> this.revealTaleForDay(day))
    .collect(Collectors.joining());
    return "This is".concat(taleForDay).concat(".");
  }

  public String getPoetryTale(){
    if((Boolean)this.flags.get(this.REVEAL_FOR_DAY)){
        poetry = new PoetryTaleForDay(this);
    }
    else if((Boolean)this.flags.get(this.RECITE)){
        poetry = new WholePoetry(this);
    }
    else{
        poetry = new NotPoetryProblem();
    }
    return poetry.revealPoetry();
  }
}

public class App{
  List<String> flags;
  final String REVEAL_FOR_DAY = "--reveal-for-day";
  final String RECITE = "--recite";
  final String DAY_VALUE = "for_which_day";

  App(String[] args){
    flags = Arrays.asList(args);
  }

  public HashMap<String, Object> parseArgs(){
    HashMap<String, Object> arguments = new HashMap<String, Object>();
    arguments.put(this.REVEAL_FOR_DAY, this.flags.contains(this.REVEAL_FOR_DAY));
    arguments.put(this.RECITE, this.flags.contains(this.RECITE));
    arguments.put(this.DAY_VALUE, this.flags.contains(this.REVEAL_FOR_DAY) ? "" + this.flags.get(this.flags.indexOf(this.REVEAL_FOR_DAY) + 1) : "0");
    return arguments;
  }

  public String getPoetryTale(){
    CumulativePoetry poetry = new CumulativePoetry(this.parseArgs());
    String finalPoetry = poetry.getPoetryTale();
    System.out.println(finalPoetry);
    return finalPoetry;
  }

  public static void main(String[] args) {
      App app = new App(args);
      String finalPoetry = app.getPoetryTale();
  }
}
